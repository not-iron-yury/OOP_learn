РАБОТА С АТРИБУТАМИ ОБЪЕКТОВ

__getattribute__()	вызывается при обращении к любому атрибуту
__getattr__()		вызывается при обращении к несуществующему атрибуту
__setattr__()		вызывается при установке атрибута или изменении его значения
__delattr__()		вызывается при удалении любого атрибута

Вызов функций getattr(), setattr() и delattr(), как и точечной нотации, приводит к вызовам
магических методов __getattribute__(), __getattr__(), __setattr__() и __delattr__().


-----------------------

__getattribute__()

В Python операция обращения к атрибуту определяется не одним, а двумя магическими методами: __getattribute__() и __getattr__().
Разница между ними в том, что метод __getattribute__() вызывается первым и вызывается всегда, а метод __getattr__()
вызывается только в том случае, если атрибута, к которому происходит обращение, не существует.

Если атрибут существует, метод __getattribute__() возвращает его значение, в противном случае вызывается метод __getattr__().
Метод __getattribute__() может либо сам вызвать метод __getattr__(), либо возбудить исключение AttributeError,
и тогда метод __getattr__() будет вызван автоматически.

def __getattribute__(self, attr):
        return object.__getattribute__(self, attr) # получение значения атрибута attr объекта self, через обращение к базовому объекту


Обращаясь к методу __getattribute__() базового класса object, передаем ему объект и имя атрибута, значение по которому необходимо получить.
Метод __getattribute__() класса object возвращает значение атрибута по указанному имени или возбуждает исключение AttributeError,
если атрибут с указанными именем не был найден.

-----------------------


__getattr__()

Вызывается только в двух случаях:
1) если в теле метода __getattribute__() было возбуждено исключение AttributeError
2) если метод __getattr__() был явно вызван в теле метода __getattribute__()


При обращении к несуществующему атрибуту, вместо исключения AttributeError, можно возвращать дефолтное значение.
	...
	def __getattr__(self, attr):
			return None



Можно имитировать наличие атрибутов, которыми объект не обладает.
	...
	def __getattr__(self, attr):
		if attr == 'info':
			return f'Имя: {self.name}\nПорода: {self.breed}'
		raise AttributeError


-----------------------

__setattr__()

Вызывается при установке атрибута или при изменении его значения.
А так же позволяет перед установкой атрибута его модифицировать.
	...
    def __setattr__(self, attr, value):
        attr = '_' + attr				# все новые атриуты будут иметь модификацию имени
        self.__dict__[attr] = value



Метод __setattr__() может использовать свою базовую реализацию из класса object.
	...
    def __setattr__(self, attr, value):
        attr = '_' + attr
        object.__setattr__(self, attr, value)	# через базовый объект



!ВАЖНО. Установка атрибута или изменение его значения внутри метода __setattr__() происходит напрямую через словарь атрибутов __dict__.
Если сделать это через точечную нотацию, то, метод __setattr__() будет рекурсивно вызывать сам себя.
	...
    def __setattr__(self, attr, value):
        attr = '_' + attr
        self.attr = value				# НЕ ИСПОЛЬЗОВАТЬ, т.к. точечная нотация приведет к рекурсии и некоторому дерьму


-----------------------


__delattr__()

Вызывается при удалении атрибута.
	...
	def __delattr__(self, attr):
			del self.__dict__[attr]

Взаимодействие с атрибутами происходит напрямую через словарь атрибутов __dict__. Либо через базовую реализацию из класса object.
	...
    def __delattr__(self, attr):
        object.__delattr__(self, attr)