МАГИЧЕСКИЙ МЕТОД __call__()

Позволяет экземплярам класса вести себя так, как будто они функции, то есть мы можем вызывать их передавая им аргументы,
или передавать их в другие функции, которые ожидают функцию в качестве аргумента.

class Cat:
    def __init__(self, name):
        self.name = name

    def __call__(self):
        print('Меня зовут', self.name)


cat = Cat('Кемаль')		# создание вызываемого обекта
cat()       			# равнозначно cat.__call__()


!ВАЖНО. метод __call__(), являясь обычным методом экземпляра, может принимать произвольное количество аргументов.
И если они есть, то при вызове экземпляров класса их потребуется передать.

class Cat:
    def __init__(self, name):
        self.name = name

    def __call__(self, speech):			   	# вызов предполагает 1 аргумент
        print('Меня зовут', self.name, 'и я делаю', speech)


cat = Cat('Кемаль')				# создание вызываемого обекта

cat('Мяу')                      # равнозначно cat.__call__('Мяу')
cat('Мяяяяяy')                  # равнозначно cat.__call__('Мяяяяяy')
>>
Меня зовут Кемаль и я делаю Мяу
Меня зовут Кемаль и я делаю Мяяяяяy

----------------------------------------------

СЦЕНАРИИ ИСПОЛЬЗОВАНИЯ МЕТОДА __call__()


Сценарий 1. Альтернатива замыканиям.

# Функция:
def line_generator(k, b):
    def func(x):
        return k * x + b
    return func

line_func1 = line_generator(2, 5)          # получаем функцию y = 2*x + 5
line_func2 = line_generator(-6, 9)         # получаем функцию y = -6*x + 9

print(line_func1(10))   >> 25              # выводим значение 2*10 + 5 = 25
print(line_func2(4))    >> -15             # выводим значение -6*4 + 9 = -15

# Класс:
class LineGenerator:
    def __init__(self, k, b):
        self.k = k
        self.b = b

    def __call__(self, x):
        return self.k * x + self.b


line_func1 = LineGenerator(2, 5)           # получаем функцию y = 2*x + 5
line_func2 = LineGenerator(-6, 9)          # получаем функцию y = -6*x + 9

print(line_func1(10))   >> 25              # выводим значение 2*10 + 5 = 25
print(line_func2(4))	>> -15             # выводим значение -6*4 + 9 = -15

-----------------------

Сценарий 2. Декораторы на основе классов.

# Функция:
def uppercase_decorator(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs).upper()
    return wrapper

@uppercase_decorator
def greet(name):
    return f'Привет, {name}'

print(greet('Кемаль'))		# ПРИВЕТ, КЕМАЛЬ


# Класс:
class UppercaseDecorator:
    def __init__(self, func):
        self.func = func

    def __call__(self, *args, **kwargs):
        return self.func(*args, **kwargs).upper()


@UppercaseDecorator
def greet(name):
    return f'Привет, {name}'

print(greet('Кемаль'))		# ПРИВЕТ, КЕМАЛЬ

Принцип создания декораторов на основе классов довольно прост. Достаточно запомнить декорируемую функцию,
а затем расширить ее функционал в магическом методе __call__().

-----------------------

Сценарий 3. Магический метод __call__() может быть полезен в классах, чьи экземпляры часто изменяют своё состояние.
Т.е. вместо геттера, проперти и прочего, можно использовать лишь метод __call__ для переопределения значений атрибутов объекта.

Пример:
Рассмотрим класс Point, описывающий точку на плоскости. Определим в классе метод __call__(),
позволяющий изменять координаты точки по обеим осям.

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __call__(self, x, y):		# позволяет переопределить значения x и y
        self.x, self.y = x, y


point = Point(1, 2)
print(point.x, point.y)		# 1 2

point(3, 4)					# переопределение свойств
print(point.x, point.y)		# 3 4

-----------------------

Примечание.
Наличие метода __call__() у объекта сообщает является ли он вызываемым или нет.
print(hasattr(int, '__call__')) 	# True
print(hasattr(len, '__call__'))		# True
print(hasattr(1, '__call__'))		# False

print(callable(int))				# True
print(callable(len))				# True
print(callable(1))					# False

----------------------------------------------

Сценарий 4. Объект-компаратор

Функця-компаратор описывает правило сортировки. Например, если нужно отсортировать список экземпляров некоторого класса
на основе значений определенного атрибута. Для этого необходимо реализовать функцию, которая принимает в качестве аргумента
этот экземпляр и возвращает значение необходимого атрибута.

# ---- Вариант через лямбду ----
class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __repr__(self):
        return f'User({self.name}, {self.age})'


users = [User('Gvido', 67), User('Timur', 30), User('Arthur', 20)]

print(sorted(users, key=lambda user: user.age))		# [User(Arthur, 20), User(Timur, 30), User(Gvido, 67)]



# ---- Вариант через класс ----
class SortKey:
    def __init__(self, *args):		# сюда падают названия атрибутов, например 'name', 'age' и т.д.
        self.attributes = args

    def __call__(self, obj):		# сюда падают объекты класса User
        return [getattr(obj, i) for i in self.attributes]


class User:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __repr__(self):
        return f'User({self.name}, {self.age})'


users = [User('Gvido', 67), User('Timur', 30), User('Arthur', 20)]

print(sorted(users, key=SortKey('age')))            # сортировка на основе атрибута age
print(sorted(users, key=SortKey('name', 'age')))    # сортировка на основе атрибута name, а затем age


!ВАЖНО.
Сначала key=SortKey('name') это создание объекта SortKey. А потом его вызов с передачей ему уже не строки 'name', а объекта User.
key отраатывает несколько раз, и через хитрую жопу.