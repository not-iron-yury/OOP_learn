"""
Реализуйте класс Vector, описывающий вектор на плоскости.

При создании экземпляра класс должен принимать два аргумента в следующем порядке:
    x — координата вектора по оси x
    y — координата вектора по оси y

Экземпляр класса Vector должен иметь следующее формальное строковое представление:
    Vector(<координата x>, <координата y>)

Также экземпляры класса Vector должны поддерживать между собой операции
сложения и вычитания с помощью операторов + и - соответственно:
    1) результатом сложения должен являться новый экземпляр класса Vector, координата по оси x которого
    равна сумме координат по оси x исходных векторов, координата по оси y — сумме координат по оси y исходных векторов

    2) результатом вычитания должен являться новый экземпляр класса Vector координата по оси x которого
    равна разности координат по оси x исходных векторов с учетом порядка,
    координата по оси y — разности координат по оси y исходных векторов с учетом порядка.

Наконец, экземпляр класса Vector должен поддерживать операции умножения и деления на число n
с помощью операторов * и / соответственно:
    1) результатом умножения должен являться новый экземпляр класса Vector, координаты которого умножены на n
    2) результатом деления должен являться новый экземпляр класса Vector, координаты которого поделены на n

Операция умножения должна быть выполнима независимо от порядка операндов,
то есть должна быть возможность умножить как вектор на число, так и число на вектор.

Примечание 1. Числами будем считать экземпляры классов int и float.
Также будем гарантировать, что экземпляр класса Vector всегда делится на ненулевое число.

Примечание 2. Если объект, с которым выполняется арифметическая операция, некорректен,
метод, реализующий эту операцию, должен вернуть константу NotImplemented.

Примечание 3. Дополнительная проверка данных на корректность не требуется.
Гарантируется, что реализованный класс используется только с корректными данными.

Примечание 4. Никаких ограничений касательно реализации класса Vector нет, она может быть произвольной.
"""


class Vector:
    def __init__(self, x, y):
        self.x, self.y = x, y

    def __repr__(self):
        return f"Vector({self.x}, {self.y})"

    def __add__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x + other.x, self.y + other.y)
        return NotImplemented

    def __sub__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x - other.x, self.y - other.y)
        return NotImplemented

    def __mul__(self, other):
        if isinstance(other, int | float):
            return Vector(self.x * other, self.y * other)
        return NotImplemented

    def __rmul__(self, other):
        return self.__mul__(other)


    def __truediv__(self, other):
        if isinstance(other, int | float):
            return Vector(self.x / other, self.y / other)
        return NotImplemented




if __name__ == '__main__':
    a = Vector(1, 2)
    b = Vector(3, 4)
    print(a + b)
    print(b + a)
    print(a - b)
    print(b - a)
    print(a * 10)
    print(10 * a)
    try:
        print(a / "10")
    except TypeError:
        print('Неправильный тип данных. Введи число, умник.')