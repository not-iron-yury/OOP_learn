@classmethod
Такие методы имеют возможность менять состояние класса, что в свою очередь отражается на всех экземплярах данного класса.
Однако менять состояние конкретного объекта, как это делают методы экземпляра, они не могут,
так как имеют доступ лишь к классу.
Зачастую методы класса используются для добавления альтернативного способа создания экземпляров класса.

class Cat:
    def __init__(self, breed, name):
        self.breed = breed
        self.name = name

    @classmethod
    def british(cls, name):
        return cls('Британский', name)  # равнозначно Cat('Британский', name)


cat = Cat.british('Кемаль')
print(cat.breed, cat.name)				# Британский Кемаль

-----------------------

@staticmethod
Статические методы можно считать обычными функциями, которые помещены в класс для удобства.
Чаще всего это какой-то вспомогательный код, предназначенный для внутреннего использования.
Статические методы могут вызываться внутри методов экземпляра или класса для вычисления каких-либо значений,
которые напрямую не связаны с экземплярами класса или самим классом.

class Square:
    def __init__(self, size_sm):
        self.size_sm = size_sm

    def get_size(self, size_mm=False):
        if size_mm:
            return Square.size_mm(self.size_sm) # возврат альтернативного значения
        return self.size_sm						# возврат стандартного значения

    @staticmethod
    def size_mm(size_sm):	 # дополнительный функционал
        return size_sm * 10  # конвертация см в мм

sq = Square(10)

print(sq.get_size())        # размер в см
print(sq.get_size(True))    # размер в мм
