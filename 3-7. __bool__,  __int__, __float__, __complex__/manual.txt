ПРЕОБРАЗОВАНИЕ ТИПОВ

Магический метод __bool__()
Реализовав данный метод в классе, можно определить, какие экземпляры будут считаться истинными, а какие ложными.


class Angle:
    def __init__(self, value):
        self.value = value

    def __bool__(self):
        return self.value != 0


print(bool(Angle(-110)))	# True
print(bool(Angle(0)))		# False
print(bool(Angle(0.0)))		# False
print(bool(Angle(120.1)))	# True


Помимо магического метода __bool__(), за приведение объекта к логическому типу и его поведение при передаче в функцию bool()
может отвечать и магический метод __len__(). Если в классе не реализован метод __bool__(),
то происходит попытка вызова метода __len__(), и если он реализован и возвращает ненулевое значение,
то объект считается истинным, в противном случае объект считается ложным.


class Angle:
    def __init__(self, value):
        self.value = value

    def __len__(self):
        return self.value != 0


print(bool(Angle(-110)))	# True
print(bool(Angle(0)))		# False
print(bool(Angle(120.1)))	# True


!ВАЖНО. Вызов магического метода __bool__() (в определенных случаях __len__()) происходит во время любых логических приведений.
Например, при проверке на истинность с помощью условного оператора if.

Встроенные функции all() и any() так же приводят к вызову метода __bool__() (в определенных случаях __len__()),
поэтому реализовав в классе приведение к логическому типу, можно полноценно пользоваться данными функциями,
передавая им в качестве аргументов экземпляры собственных классов.


-----------------------

Магические методы __int__(), __float__() и __complex__()

Преобразовывать экземпляры собственных классов в объекты типа int, float и complex можно, определив в классе методы:

__int__() — определяет поведение экземпляра при передаче в функцию int().
Метод должен возвращать значение, соответствующее преобразованию экземпляра в тип int.

__float__() — определяет поведение экземпляра при передаче в функцию float().
Метод должен возвращать значение, соответствующее преобразованию экземпляра в тип float.

__complex__() — определяет поведение экземпляра при передаче в функцию complex().
 Метод должен возвращать значение, соответствующее преобразованию экземпляра в тип complex.


class Angle:
    def __init__(self, value):
        self.value = value

    def __int__(self):
        return int(self.value)

    def __float__(self):
        return float(self.value)


angle1 = Angle(100)
angle2 = Angle(100.1)

print(int(angle1))		# 100
print(int(angle2))		# 100
print(float(angle1))	# 100.0
print(float(angle2))	# 100.1


-----------------------

Магические методы  __oct__() и __hex__()

Помимо преобразований экземпляров собственных классов в целые, вещественные и комплексные числа,
можно определить их преобразование в восьмеричные и шестнадцатеричные числа при передаче
в функции oct() и hex() соответственно. Данные преобразования возможны, если в классе реализованы
одноименные магические методы __oct__() и __hex__().
