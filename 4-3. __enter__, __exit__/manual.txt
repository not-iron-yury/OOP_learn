ПРОТОКОЛ КОНТЕКСТНЫХ МЕНЕДЖЕРОВ

Оператор with может работать только с объектами, которые реализуют протокол контекстного менеджера.

class Cat:
    def __init__(self, name):
        self.name = name


with Cat('Кемаль') as cat:
    print(cat)		# AttributeError: __enter__ , т.к. класс Cat не реализует протокол контекстного менеджера.

# В Python 3.11 возбуждается исключение TypeError: 'Cat' object does not support the context manager protocol.

-----------------------

Контекстный менеджер — это объект, определяющий контекст выполнения в операторе with.

Протокол контекстных менеджеров состоит всего из двух методов:

__enter__() – срабатывает в момент создания менеджера контекста.
Значение, возвращаемое этим методом, привязывается к переменной указанной после as.

__exit__() – срабатывает в момент завершения работы менеджера контекста или возникновения исключения.
Возвращает логический флаг (тип bool), указывающий на то, следует ли подавлять возбужденное исключение.
__exit__ сработатывает всегла, подобно блоку finally в конструкции try/except/finally.

При возбуждении исключения во время выполнения тела блока with, его аргументы содержат информацию о
типе исключения (exc_type), объекте исключения (exc_val), информацию о трассировке (exc_tb).
Если исколючение не возбуждается, все три аргумента будут иметь значение None.


class CustomContextManager:
    def __enter__(self):
        print('Вход в контекстный менеджер...')
        return 'Python generation!'

    def __exit__(self, exc_type, exc_value, exc_tb):
        print('Выход из контекстного менеджера...')
        print(exc_type, exc_value, exc_tb, sep='\n')


with CustomContextManager() as manager:
    print(manager)
	print(manager[100])           # обращение по несуществующему индексу, для получения исключения

# выводит:

	Вход в контекстный менеджер...
	Python generation!
	Выход из контекстного менеджера...
	<class 'IndexError'>						# exc_type (тип исключения)
	string index out of range					# exc_value	(объект исключения)
	<traceback object at 0x000001E5CBB57500>	# exc_tb (информация о трассировке)

	IndexError: string index out of range		# в самом конце возбуждается исключение


Оператор with сначала создается экземпляр класса CustomContextManager, а затем вызывается
его метод __enter__(), который печатает текст Вход в контекстный менеджер...
и возвращает строку Python generation!, которая присваивается переменной manager.

Далее исполняется тело оператора with, после чего вызывается метод __exit__().

Поскольку во время выполнения тела оператора with не было возбуждено никакое исключение,
то все три аргумента exc_type, exc_value и traceback метода __exit__() равны None.

Аргументы метода __exit__() содержат информацию о возбужденном исключении. В атрибуте exc_value.args можно
найти параметры, переданные конструктору исключения, например, сообщение об ошибке.

----------------------------------------------


ОБРАБОТКА ИСКЛЮЧЕНИЙ ВНУТРИ БЛОКА with


Для обработки исключений внутри блока with нужно в метод __exit__() добавить дополнительный код.
Метод __exit__() возвращает True/False, указывающий на то, следует ли подавлять возбужденное исключение или нет.

	...
	def __exit__(self, exc_type, exc_value, traceback):
			print('Выход из контекстного менеджера...')
			if isinstance(exc_value, IndexError):			# если у атрибута exc_value значение IndexError
				return True                                 # подавляем возбужденное исключение IndexError


with CustomContextManager() as manager:
    print(manager)
    print(manager[100])                                 # обращаемся по несуществующему индексу

# выводит:

	Вход в контекстный менеджер...
	Python generation!
	Выход из контекстного менеджера...

Возврат значения True позволяет поглотить возбужденное в теле оператора with исключение и продолжить
выполнение с оператора, следующего непосредственно за оператором with.

-----------------------

Если при выполнении тела оператора with не возбуждается исключение IndexError, то метод возвращает значение None,
которое приводится к логическому False.

	...
    def __exit__(self, exc_type, exc_value, traceback):
        print('Выход из контекстного менеджера...')
        if isinstance(exc_value, IndexError):
            return True                                 # подавляем только IndexError
        return False                                    # остальные исключения не подавляются


Передаваемое исключение exc_value не следует никогда повторно возбуждать в методе __exit__(),
вместо этого метод __exit__() должен возвращать значение False,
чтобы указать, что метод завершился успешно и не хочет подавлять возбужденное исключение.
Это позволяет коду управления контекстом легко определять, действительно ли метод __exit__() потерпел неудачу.

Исключения, возникающие во время выполнения метода __exit__(), заменяют все исключения, возникшие в теле оператора with.



----------------------------------------------

ПРИМЕРЫ

Пример 1. Управление файлами с помощью контекстного менеджера.

class FileManager():
    """класс FileManager помогает открыть файл, записать/прочитать содержимое, а затем закрыть его."""

    def __init__(self, filename, mode):
        self.filename = filename
        self.mode = mode
        self.file = None

    def __enter__(self):
        self.file = open(self.filename, self.mode)
        return self.file

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.file.close()


with FileManager('test.txt', 'w') as f:		# загрузка файла
    f.write('Test')

print(f.closed)			# True


При выполнении блока with последовательно выполняются следующие операции:

1) Создается объект FileManager с аргументами test.txt и w (write) при выполнении метода __init__.
2) Метод __enter__ открывает файл test.txt в режиме записи (write) и возвращает объект FileManager,
который присваивается переменной f.
3) Текст «Test» записывается в файл.
4) Метод __exit__ обеспечивает закрытие файла при выходе из блока with.

Когда выполняется print(f.closed), то на экран выводится True, поскольку FileManager уже позаботился
о закрытии файла, что в противном случае нужно было бы сделать явно.


-----------------------

Пример 2. Управление подключением к базе данных с помощью контекстного менеджера.

from pymongo import MongoClient

class MongoDBConnectionManager():
    def __init__(self, hostname, port):
        self.hostname = hostname
        self.port = port
        self.connection = None

    def __enter__(self):
        self.connection = MongoClient(self.hostname, self.port)
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.connection.close()

# подключение к localhost
with MongoDBConnectionManager('localhost', '27017') as mongo:
    collection = mongo.connection.SampleDb.test
    data = collection.find({'_id': 1})
    print(data.get('name'))


При выполнении блока with последовательно выполняются следующие операции:

1) Создается объект MongoDBConnectionManager с аргументами localhost и 27017 при выполнении метода __ init__.
2) Метод __enter__ открывает соединение mongodb и возвращает объект MongoDBConnectionManager переменной mongo.
3) Осуществляется доступ к коллекции (collection) test в базе данных SampleDb и извлекается документ с _id=1.
На экран выводится поле name документа.
4) Метод __exit__ обеспечивает закрытие соединения при выходе из блока with.